library(readr)
CWTme_mh_APO_001_CWT_features <- read_csv("Documents/Thesis-Stroke/StatisticalAnalysis/CWT/CWTme_mh_APO-001_CWT_features.csv")
View(CWTme_mh_APO_001_CWT_features)
data <- CWTme_mh_APO_001_CWT_features
install.packages('dplyr')
library(dplyr)
data$Label <- factor(data$Label)
data$Stage <- factor(data$Stage)
tst <- data[data$Stage == '1', data$Freq_name = 'Delta']
tst <- data[data$Stage == '1', data$Freq_name == 'Delta',]
tst <- data[data$Stage == '1' & data$Freq_name == 'Delta',]
tst.mean <- group_by(data = tst, add = 'mean')
tst.mean <- group_by(.data = data)
tst.mean <- group_by(.data = data, add = mean())
tst.mean <- group_by(.data = data, add = mean
)
tst.mean <- group_by(.data = data, add = 'mean')
aggregate(x = data, by = list(ID_pat = data$ID_pat, Stage = data$Stage, Chann_name = data$Chann_name, Freq_name = data$Freq_name), FUN = mean)
data.agg <- aggregate(x = data, by = list(ID_pat = data$ID_pat, Stage = data$Stage, Chann_name = data$Chann_name, Freq_name = data$Freq_name), FUN = mean)
View(data.agg)
data$Chann_name <- factor(data$Chann_name)
data$ID_pat <- factor(data$ID_pat)
data$Freq_name <- factor(data$Freq_name)
data.agg <- aggregate(x = data, by = list(ID_pat = data$ID_pat, Stage = data$Stage, Chann_name = data$Chann_name, Freq_name = data$Freq_name), FUN = mean)
View(data.agg)
data.agg <- aggregate(x = data, by = list(data$Freq_name, data$ID_pat, data$Stage, data$Chann_name), FUN = mean)
library(readr)
me_mh_APO_001_CWT_features <- read_csv("Downloads/me_mh_APO-001_CWT_features.csv")
View(me_mh_APO_001_CWT_features)
CWTme_mh_APO_001_CWT_features$Chann_name <- factor(CWTme_mh_APO_001_CWT_features$Chann_name)
# Import libraries
library(jsonlite)
library(tidyverse)
library(readr)
library(data.table)
library(ggrepel)
library(viridis)
library(hrbrthemes)
library(HIBAG)
library(parallel)
########## IMPORT ##########
setwd("~/Documents/LGI1")
# Import settings
settings <- jsonlite::fromJSON('settings.json')
# Load pre-fit model and comvert to hlaMODEL
model.list <- get(load(settings$file$PMRA_HLA_model))
hla.id <- names(model.list)
# Import file
gname <- settings$file$filtLGI1
yourgeno <- hlaBED2Geno(bed.fn=paste(gname, ".bed", sep = ''), fam.fn=paste(gname, ".fam", sep='')
, bim.fn=paste(gname, ".bim", sep=''), assembly = 'hg19')
summary(yourgeno)
# Make cluster
cl <- makeCluster(10)
# Make predictions
for (locus in hla.id){
model.hla <- hlaModelFromObj(model.list[[locus]])
summary(model.hla)
pred.guess <- predict(model.hla, yourgeno, type="response+prob", nclassifiers=100, cl=cl)
save.name <- paste('HLA', locus, sep = '-')
assign(save.name, pred.guess)
save(save.name, file = paste("./Data/HLA_predictions/", save.name, '.RData', sep= ''))
}
# Import settings
settings <- jsonlite::fromJSON('settings.json')
########## COLLAPSE #########
path >- settings$directory$HLA_predictions
pred.files <- list.dirs(settings$directory$HLA_predictions)
########## COLLAPSE #########
path <- settings$directory$HLA_predictions
pred.files <- list.dirs(settings$directory$HLA_predictions)
# Load first file
load(paste(path, pred.files[1], sep = ''))
# Import libraries
library(jsonlite)
library(tidyverse)
library(readr)
library(data.table)
library(ggrepel)
library(viridis)
library(hrbrthemes)
library(HIBAG)
library(parallel)
########## IMPORT ##########
setwd("~/Documents/LGI1")
# Import settings
settings <- jsonlite::fromJSON('settings.json')
########## COLLAPSE #########
path <- settings$directory$HLA_predictions
pred.files <- list.dirs(settings$directory$HLA_predictions)
# Import settings
settings <- jsonlite::fromJSON('settings.json')
########## IMPORT ##########
setwd("~/Documents/LGI1")
# Import settings
settings <- jsonlite::fromJSON('settings.json')
########## COLLAPSE #########
path <- settings$directory$HLA_predictions
pred.files <- list.dirs(settings$directory$HLA_predictions)
pred.files <- list.files(settings$directory$HLA_predictions)
# Load first file
load(paste(path, pred.files[1], sep = ''))
load("~/Documents/LGI1/Data/HLA_predictions/HLA-A.RData")
(paste(path, pred.files[1], sep = '')
)
# Load first file
data <- load(paste(path, pred.files[1], sep = ''))
########## IMPORT ##########
setwd("~/Documents/LGI1")
# Import settings
settings <- jsonlite::fromJSON('settings.json')
########## COLLAPSE #########
path <- settings$directory$HLA_predictions
pred.files <- list.files(settings$directory$HLA_predictions)
# Load first file
data <- load(paste(path, pred.files[1], sep = ''))
sample.id <- pred.guess$value$sample.id
data <- data.frame('FID' = sample.id, 'IID' = sampple.id)
data <- data.frame('FID' = sample.id, 'IID' = sample.id)
View(pred.guess)
# Load first file
init.data <- load(paste(path, pred.files[1], sep = ''))
sample.id <- pred.guess$value$sample.id
data <- data.frame('FID' = sample.id, 'IID' = sample.id)
file <- pred.files+
file <- pred.files[1]
file
f <- strsplit(file, '.')[1]
f
f <- strsplit(file, '.'
f
f <- strsplit(file, '.')
f
f <- strsplit(file, '\.')
f <- strsplit(file, '\\.')
f
f[[1]][1]
te,p <- load(paste(path, file, sep = ''))
temp <- load(paste(path, file, sep = ''))
file
paste(path, file, sep = '')
temp <- load(paste(path, file, sep = ''))
temp <- get(load(paste(path, file, sep = '')))
temp <- get(load(paste(path, file, sep = '')))
# Load first file
init.data <- get(load(paste(path, pred.files[1], sep = '')))
sample.id <- pred.guess$value$sample.id
data <- data.frame('FID' = sample.id, 'IID' = sample.id)
for (file in pred.files){
temp <- get(load(paste(path, file, sep = '')))
name <- strsplit(file, '\\.')[[1]][1]
data[paste(name, 'allele1', sep = 1)] <- temp$value$allele1
data[paste(name, 'allele2',sep = 2)] <- temp$value$allele2
}
for (file in pred.files){
temp <- get(load(paste(path, file, sep = '')))
name <- strsplit(file, '\\.')[[1]][1]
data[paste(name, 'allele1', sep = '_')] <- temp$value$allele1
data[paste(name, 'allele2',sep = '_')] <- temp$value$allele2
}
View(data)
# Import settings
settings <- jsonlite::fromJSON('settings.json')
# Write
write.table(data, file = settings$file$HLA_total, row.names = FALSE, col.names = TRUE)
# Write
write.table(data, file = settings$file$HLA_total, row.names = FALSE, col.names = TRUE, sep = '\t')
# Write
write_csv(data, file = settings$file$HLA_total, row.names = FALSE, col.names = TRUE, sep = '\t')
# Write
write(data, file = settings$file$HLA_total, row.names = FALSE, col.names = TRUE, sep = '\t')
# Write
write(data, file = settings$file$HLA_total, quote = FALSE, row.names = FALSE, col.names = TRUE, sep = '\t')
# Write
write.table(data, file = settings$file$HLA_total, quote = FALSE, row.names = FALSE, col.names = TRUE, sep = '\t')
eigenvec <- get(load(settings$file$PCAeigenvectors))
load(settings$file$PCAeigenvectors)
eigenvec <- read.delim(settings$file$PCAeigenvectors, header = TRUE, sep = "\t", quote = '')
View(eigenvec)
eigenvec <- read.delim(settings$file$PCAeigenvectors, header = TRUE, sep = " ", quote = '')
View(eigenvec)
eigenvec <- read.delim(settings$file$PCAeigenvectors, header = FALSE, sep = " ", quote = '')
View(eigenvec)
eigenvec <- read.delim(settings$file$PCAeigenvectors, header = TRUE, sep = " ", quote = '')
View(eigenvec)
eigenvec <- read.table(settings$file$PCAeigenvectors, header = TRUE, sep = " ", quote = '')
View(eigenvec)
eigenvec <- read.table(settings$file$PCAeigenvectors, header = TRUE, sep = " ", quote = '', col.names = 1)
eigenvec <- read.table(settings$file$PCAeigenvectors, header = TRUE, sep = " ", quote = '', row.names = 1)
View(eigenvec)
eigenvec <- read.table(settings$file$PCAeigenvectors, header = FALSE, sep = " ", quote = '', col.names = 1)
eigenvec <- read.table(settings$file$PCAeigenvectors, header = TRUE, sep = " ", quote = '')
View(eigenvec)
eigenvec <- read.table(settings$file$PCAeigenvectors, header = FALSE, sep = " ", quote = '')
# Import settings
settings <- jsonlite::fromJSON('settings.json')
eigenvec <- read.table(settings$file$finalPCAeigenvectors, header = FALSE, sep = " ", quote = '')
View(eigenvec)
eigenvec <- read.table(settings$file$finalPCAeigenvectors, header = FALSE, sep = "\t", quote = '')
View(eigenvec)
eigenvec <- read.table(settings$file$finalPCAeigenvectors, header = TRUE, sep = "\t", quote = '')
View(eigenvec)
View(data)
# Merge
covars <- merge(eigenvec, data, by = c('FID', 'IID'))
View(covars)
# Import settings
settings <- jsonlite::fromJSON('settings.json')
# Write
write.table(covars, file = settings$file$covariates, quote = FALSE, sep = '\t')
# Write
write.table(covars, file = settings$file$covariates, quote = FALSE, sep = '\t', row.names = FALSE)
# Import libraries
library(jsonlite)
library(tidyverse)
library(readr)
library(data.table)
library(ggrepel)
library(viridis)
library(hrbrthemes)
########## IMPORT ##########
setwd("~/Documents/LGI1")
# Import settings
settings <- jsonlite::fromJSON('settings.json')
# Import association file
assoc.data <- read.table('./Data/filtLGI1.assoc.logistic', header = TRUE, sep = '')
assoc.data <- assoc.data[which(assoc.data$TEST == 'ADD'),]
######### PLOT ###########
# Data table variables
pvals <- assoc.data$P
x <- c(1:length(pvals))
chr <- assoc.data$CHR
# Import libraries
library(jsonlite)
library(tidyverse)
library(readr)
library(data.table)
library(ggrepel)
library(viridis)
library(hrbrthemes)
########## IMPORT ##########
setwd("~/Documents/LGI1")
# Import association file
assoc.data <- read.table('./Resources/filtLGI1.assoc.logistic', header = TRUE, sep = '')
assoc.data <- assoc.data[which(assoc.data$TEST == 'ADD'),]
######### PLOT ###########
# Data table variables
pvals <- assoc.data$P
x <- c(1:length(pvals))
chr <- assoc.data$CHR
colors <- c()
flag <- 1
for (c in unique(chr)){
l <- nrow(assoc.data[which(assoc.data$CHR == c),])
if (flag == 1){
colors <- c(colors, rep('#F8766D', l))
flag = 2
}
else{
colors <- c(colors, rep('#00BFC4', l))
flag = 1
}
}
# Create datatable
plot.data <- data.table('pval' =  -log10(pvals), 'pos' =  x, 'colors' = colors, 'chr' = chr)
axisdf <- plot.data %>% group_by(chr) %>% summarize(center=( max(pos) + min(pos)) / 2 )
# Plot
png("GWAS.png", width = 1920, height = 1080)
ggplot() + geom_point(data = plot.data, aes(pos, pval, color = as.factor(colors)), alpha = 1) +
scale_x_continuous(label = axisdf$chr, breaks= axisdf$center ) +
labs(x='Chromosome',y='-log10(pval)', title='GWAS') +
geom_hline(yintercept = -log10(5e-8)) +
theme(legend.position = "none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
dev.off()
# Import libraries
library(jsonlite)
library(tidyverse)
library(readr)
library(data.table)
library(ggrepel)
library(viridis)
library(hrbrthemes)
library(HIBAG)
library(parallel)
########## IMPORT ##########
setwd("~/Documents/LGI1")
# Import settings
settings <- jsonlite::fromJSON('settings.json')
########## COLLAPSE #########
path <- settings$directory$HLA_predictions
pred.files <- list.files(settings$directory$HLA_predictions)
# Load first file and get list of samples
init.data <- get(load(paste(path, pred.files[1], sep = '')))
sample.id <- pred.guess$value$sample.id
data <- data.frame('FID' = sample.id, 'IID' = sample.id)
temp <- get(load(paste(path, file, sep = '')))
name <- strsplit(file, '\\.')[[1]][1]
name
name <- strsplit(name, '\\-')[[1]]
name
# Collapse
for (file in pred.files){
temp <- get(load(paste(path, file, sep = '')))
name <- strsplit(file, '\\.')[[1]]
name <- strsplit(name, '\\-')[[1]]
name <- paste(name[1], name[2], sep = '')
data[paste(name, 'allele1', sep = '_')] <- temp$value$allele1
data[paste(name, 'allele2',sep = '_')] <- temp$value$allele2
}
# Write
write.table(data, file = settings$file$HLA_total, quote = FALSE, row.names = FALSE, col.names = TRUE, sep = '\t')
# Read eigenvectors
eigenvec <- read.table(settings$file$finalPCAeigenvectors, header = TRUE, sep = "\t", quote = '')
# Merge
covars <- merge(eigenvec, data, by = c('FID', 'IID'))
View(data)
# Import libraries
library(jsonlite)
# Import libraries
library(jsonlite)
library(tidyverse)
library(readr)
library(data.table)
library(ggrepel)
library(viridis)
library(hrbrthemes)
library(HIBAG)
library(parallel)
########## IMPORT ##########
setwd("~/Documents/LGI1")
# Import settings
settings <- jsonlite::fromJSON('settings.json')
########## COLLAPSE #########
path <- settings$directory$HLA_predictions
pred.files <- list.files(settings$directory$HLA_predictions)
# Load first file and get list of samples
init.data <- get(load(paste(path, pred.files[1], sep = '')))
sample.id <- pred.guess$value$sample.id
data <- data.frame('FID' = sample.id, 'IID' = sample.id)
# Collapse
for (file in pred.files){
temp <- get(load(paste(path, file, sep = '')))
name <- strsplit(file, '\\.')[[1]]
name <- strsplit(name, '\\-')[[1]]
name <- paste(name[1], name[2], sep = '')
data[paste(name, 'allele1', sep = '_')] <- temp$value$allele1
data[paste(name, 'allele2',sep = '_')] <- temp$value$allele2
}
# Write
write.table(data, file = settings$file$HLA_total, quote = FALSE, row.names = FALSE, col.names = TRUE, sep = '\t')
# Read eigenvectors
eigenvec <- read.table(settings$file$finalPCAeigenvectors, header = TRUE, sep = "\t", quote = '')
# Merge
covars <- merge(eigenvec, data, by = c('FID', 'IID'))
# Write
write.table(covars, file = settings$file$covariates, quote = FALSE, sep = '\t', row.names = FALSE)
View(covars)
covars.names <- colnames(covars)
write.table(covars.names, file = 'Resources/covars_names.txt', quote = FALSE, sep = ', ', row.names = FALSE)
write(covars.names, file = 'Resources/covars_names.txt', quote = FALSE, sep = ', ', row.names = FALSE)
write(covars.names, file = 'Resources/covars_names.txt', sep = ', ')
covars.names
covars.names <- paste(covars.names, collapse = ', ')
write(covars.names, file = 'Resources/covars_names.txt')
# Import libraries
library(jsonlite)
library(tidyverse)
library(readr)
library(data.table)
library(ggrepel)
library(viridis)
library(hrbrthemes)
########## IMPORT ##########
setwd("~/Documents/LGI1")
# Import settings
settings <- jsonlite::fromJSON('settings.json')
# Import association file
assoc.data <- read.table('./Resources/filtLGI1.assoc.logistic', header = TRUE, sep = '')
assoc.data <- assoc.data[which(assoc.data$TEST == 'ADD'),]
######### PLOT ###########
# Data table variables
pvals <- assoc.data$P
x <- c(1:length(pvals))
chr <- assoc.data$CHR
colors <- c()
flag <- 1
for (c in unique(chr)){
l <- nrow(assoc.data[which(assoc.data$CHR == c),])
if (flag == 1){
colors <- c(colors, rep('#F8766D', l))
flag = 2
}
else{
colors <- c(colors, rep('#00BFC4', l))
flag = 1
}
}
# Create datatable
plot.data <- data.table('pval' =  -log10(pvals), 'pos' =  x, 'colors' = colors, 'chr' = chr)
axisdf <- plot.data %>% group_by(chr) %>% summarize(center=( max(pos) + min(pos)) / 2 )
# Plot
png("GWAS.png", width = 1920, height = 1080)
ggplot() + geom_point(data = plot.data, aes(pos, pval, color = as.factor(colors)), alpha = 1) +
scale_x_continuous(label = axisdf$chr, breaks= axisdf$center ) +
labs(x='Chromosome',y='-log10(pval)', title='GWAS') +
geom_hline(yintercept = -log10(5e-8)) +
theme(legend.position = "none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
dev.off()
View(assoc.data)
# Import association file
assoc.data <- read.table('./Resources/filtLGI1.assoc.logistic', header = TRUE, sep = '')
# Import libraries
library(jsonlite)
library(tidyverse)
library(readr)
library(data.table)
library(ggrepel)
library(viridis)
library(hrbrthemes)
########## IMPORT ##########
setwd("~/Documents/LGI1")
# Import settings
settings <- jsonlite::fromJSON('settings.json')
# Import association file
assoc.data <- read.table('./Resources/filtLGI1.assoc.logistic', header = TRUE, sep = '')
assoc.data <- assoc.data[which(assoc.data$TEST == 'ADD'),]
######### PLOT ###########
# Data table variables
pvals <- assoc.data$P
x <- c(1:length(pvals))
chr <- assoc.data$CHR
colors <- c()
flag <- 1
for (c in unique(chr)){
l <- nrow(assoc.data[which(assoc.data$CHR == c),])
if (flag == 1){
colors <- c(colors, rep('#F8766D', l))
flag = 2
}
else{
colors <- c(colors, rep('#00BFC4', l))
flag = 1
}
}
# Create datatable
plot.data <- data.table('pval' =  -log10(pvals), 'pos' =  x, 'colors' = colors, 'chr' = chr)
axisdf <- plot.data %>% group_by(chr) %>% summarize(center=( max(pos) + min(pos)) / 2 )
# Plot
png("GWAS.png", width = 1920, height = 1080)
ggplot() + geom_point(data = plot.data, aes(pos, pval, color = as.factor(colors)), alpha = 1) +
scale_x_continuous(label = axisdf$chr, breaks= axisdf$center ) +
labs(x='Chromosome',y='-log10(pval)', title='GWAS') +
geom_hline(yintercept = -log10(5e-8)) +
theme(legend.position = "none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
dev.off()
# Import libraries
library(jsonlite)
library(tidyverse)
library(readr)
library(data.table)
library(ggrepel)
library(viridis)
library(hrbrthemes)
########## IMPORT ##########
setwd("~/Documents/LGI1")
# Import settings
settings <- jsonlite::fromJSON('settings.json')
# Import association file
assoc.data <- read.table('./Resources/filtLGI1.assoc.logistic', header = TRUE, sep = '')
assoc.data <- assoc.data[which(assoc.data$TEST == 'ADD'),]
######### PLOT ###########
# Data table variables
pvals <- assoc.data$P
x <- c(1:length(pvals))
chr <- assoc.data$CHR
colors <- c()
flag <- 1
for (c in unique(chr)){
l <- nrow(assoc.data[which(assoc.data$CHR == c),])
if (flag == 1){
colors <- c(colors, rep('#F8766D', l))
flag = 2
}
else{
colors <- c(colors, rep('#00BFC4', l))
flag = 1
}
}
# Create datatable
plot.data <- data.table('pval' =  -log10(pvals), 'pos' =  x, 'colors' = colors, 'chr' = chr)
axisdf <- plot.data %>% group_by(chr) %>% summarize(center=( max(pos) + min(pos)) / 2 )
# Plot
png("GWAS.png", width = 1920, height = 1080)
ggplot() + geom_point(data = plot.data, aes(pos, pval, color = as.factor(colors)), alpha = 1) +
scale_x_continuous(label = axisdf$chr, breaks= axisdf$center ) +
labs(x='Chromosome',y='-log10(pval)', title='GWAS') +
geom_hline(yintercept = -log10(5e-8)) +
theme(legend.position = "none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
dev.off()
